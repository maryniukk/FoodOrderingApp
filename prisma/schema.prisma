//Говорим призме о том, что мы работаем с Js
generator client {
  provider = "prisma-client-js"
}

// Подключаем базу данных
datasource db {
  //тип провайдера 
  provider  = "postgresql"
  //Показывает куда делать подключение
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

//Создаем схему для юзера
model User {
  //Это поле используется при каждой схеме
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
}

model Category {
  //Это поле используется при каждой схеме
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] // создаем связь с Продуктом
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  //Это поле используется при каждой схеме
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  ingredients Ingredient[]
  items       ProductItem[]
  Category    Category?     @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductItem {
  //Это поле используется при каждой схеме
  id        Int        @id @default(autoincrement())
  price     Int
  size      Int?
  pizzaType Int?
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  CartItem  CartItem[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  name      String
  price     Int
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  token       String //Токен для зареганых и не зареганых юзеров
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  CartItem    CartItem[]
}

model CartItem {
  id            Int         @id @default(autoincrement())
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int
  cart          Cart        @relation(fields: [cartId], references: [id])
  cartId        Int
  quantity      Int
  pizzaSize     Int?
  pizzaType     Int?
}
